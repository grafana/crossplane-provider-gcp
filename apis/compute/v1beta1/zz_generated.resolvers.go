/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1"
	common "github.com/upbound/provider-gcp/config/common"
	compute "github.com/upbound/provider-gcp/config/compute"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Address.
func (mg *Address) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.NetworkRef,
		Selector:     mg.Spec.ForProvider.NetworkSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.SubnetworkRef,
		Selector:     mg.Spec.ForProvider.SubnetworkSelector,
		To: reference.To{
			List:    &SubnetworkList{},
			Managed: &Subnetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendService.
func (mg *BackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
			Extract:      compute.InstanceGroupExtractor(),
			Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
			Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
			To: reference.To{
				List:    &InstanceGroupManagerList{},
				Managed: &InstanceGroupManager{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
		Extract:       common.SelfLinkExtractor(),
		References:    mg.Spec.ForProvider.HealthChecksRefs,
		Selector:      mg.Spec.ForProvider.HealthChecksSelector,
		To: reference.To{
			List:    &HealthCheckList{},
			Managed: &HealthCheck{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this ForwardingRule.
func (mg *ForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.BackendServiceRef,
		Selector:     mg.Spec.ForProvider.BackendServiceSelector,
		To: reference.To{
			List:    &RegionBackendServiceList{},
			Managed: &RegionBackendService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.IPAddressRef,
		Selector:     mg.Spec.ForProvider.IPAddressSelector,
		To: reference.To{
			List:    &AddressList{},
			Managed: &Address{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.NetworkRef,
		Selector:     mg.Spec.ForProvider.NetworkSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.SubnetworkRef,
		Selector:     mg.Spec.ForProvider.SubnetworkSelector,
		To: reference.To{
			List:    &SubnetworkList{},
			Managed: &Subnetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.TargetRef,
		Selector:     mg.Spec.ForProvider.TargetSelector,
		To: reference.To{
			List:    &RegionTargetHTTPProxyList{},
			Managed: &RegionTargetHTTPProxy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalAddress.
func (mg *GlobalAddress) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkRef,
		Selector:     mg.Spec.ForProvider.NetworkSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalForwardingRule.
func (mg *GlobalForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IPAddressRef,
		Selector:     mg.Spec.ForProvider.IPAddressSelector,
		To: reference.To{
			List:    &GlobalAddressList{},
			Managed: &GlobalAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NetworkRef,
		Selector:     mg.Spec.ForProvider.NetworkSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
		Extract:      resource.ExtractParamPath("project", false),
		Reference:    mg.Spec.ForProvider.ProjectRef,
		Selector:     mg.Spec.ForProvider.ProjectSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetworkRef,
		Selector:     mg.Spec.ForProvider.SubnetworkSelector,
		To: reference.To{
			List:    &SubnetworkList{},
			Managed: &Subnetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TargetRef,
		Selector:     mg.Spec.ForProvider.TargetSelector,
		To: reference.To{
			List:    &TargetHTTPProxyList{},
			Managed: &TargetHTTPProxy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceGroupManager.
func (mg *InstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AutoHealingPolicies); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef,
			Selector:     mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckSelector,
			To: reference.To{
				List:    &HealthCheckList{},
				Managed: &HealthCheck{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
		Extract:       common.SelfLinkExtractor(),
		References:    mg.Spec.ForProvider.TargetPoolsRefs,
		Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
		To: reference.To{
			List:    &TargetPoolList{},
			Managed: &TargetPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
			Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
			To: reference.To{
				List:    &InstanceTemplateList{},
				Managed: &InstanceTemplate{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceTemplate.
func (mg *InstanceTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
			To: reference.To{
				List:    &NetworkList{},
				Managed: &Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
			To: reference.To{
				List:    &SubnetworkList{},
				Managed: &Subnetwork{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServiceAccount); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount[i3].Email),
			Extract:      resource.ExtractParamPath("email", true),
			Reference:    mg.Spec.ForProvider.ServiceAccount[i3].EmailRef,
			Selector:     mg.Spec.ForProvider.ServiceAccount[i3].EmailSelector,
			To: reference.To{
				List:    &v1beta1.ServiceAccountList{},
				Managed: &v1beta1.ServiceAccount{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount[i3].Email")
		}
		mg.Spec.ForProvider.ServiceAccount[i3].Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServiceAccount[i3].EmailRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RegionBackendService.
func (mg *RegionBackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
			Extract:      compute.InstanceGroupExtractor(),
			Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
			Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
			To: reference.To{
				List:    &RegionInstanceGroupManagerList{},
				Managed: &RegionInstanceGroupManager{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
		Extract:       common.SelfLinkExtractor(),
		References:    mg.Spec.ForProvider.HealthChecksRefs,
		Selector:      mg.Spec.ForProvider.HealthChecksSelector,
		To: reference.To{
			List:    &RegionHealthCheckList{},
			Managed: &RegionHealthCheck{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RegionInstanceGroupManager.
func (mg *RegionInstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AutoHealingPolicies); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef,
			Selector:     mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckSelector,
			To: reference.To{
				List:    &HealthCheckList{},
				Managed: &HealthCheck{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
		Extract:       common.SelfLinkExtractor(),
		References:    mg.Spec.ForProvider.TargetPoolsRefs,
		Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
		To: reference.To{
			List:    &TargetPoolList{},
			Managed: &TargetPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
			Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
			To: reference.To{
				List:    &InstanceTemplateList{},
				Managed: &InstanceTemplate{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RegionTargetHTTPProxy.
func (mg *RegionTargetHTTPProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
		Extract:      common.SelfLinkExtractor(),
		Reference:    mg.Spec.ForProvider.URLMapRef,
		Selector:     mg.Spec.ForProvider.URLMapSelector,
		To: reference.To{
			List:    &RegionURLMapList{},
			Managed: &RegionURLMap{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionTargetHTTPSProxy.
func (mg *RegionTargetHTTPSProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SSLCertificates),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SSLCertificatesRefs,
		Selector:      mg.Spec.ForProvider.SSLCertificatesSelector,
		To: reference.To{
			List:    &RegionSSLCertificateList{},
			Managed: &RegionSSLCertificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SSLCertificates")
	}
	mg.Spec.ForProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SSLCertificatesRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.URLMapRef,
		Selector:     mg.Spec.ForProvider.URLMapSelector,
		To: reference.To{
			List:    &RegionURLMapList{},
			Managed: &RegionURLMap{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionURLMap.
func (mg *RegionURLMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef,
				Selector:     mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceSelector,
				To: reference.To{
					List:    &RegionBackendServiceList{},
					Managed: &RegionBackendService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef,
				Selector:     mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceSelector,
				To: reference.To{
					List:    &RegionBackendServiceList{},
					Managed: &RegionBackendService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultService),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DefaultServiceRef,
		Selector:     mg.Spec.ForProvider.DefaultServiceSelector,
		To: reference.To{
			List:    &RegionBackendServiceList{},
			Managed: &RegionBackendService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultService")
	}
	mg.Spec.ForProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef,
			Selector:     mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceSelector,
			To: reference.To{
				List:    &RegionBackendServiceList{},
				Managed: &RegionBackendService{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.ForProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef,
						Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceSelector,
						To: reference.To{
							List:    &RegionBackendServiceList{},
							Managed: &RegionBackendService{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef,
						Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceSelector,
						To: reference.To{
							List:    &RegionBackendServiceList{},
							Managed: &RegionBackendService{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
				To: reference.To{
					List:    &RegionBackendServiceList{},
					Managed: &RegionBackendService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].RouteRules); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
				To: reference.To{
					List:    &RegionBackendServiceList{},
					Managed: &RegionBackendService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Test); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Test[i3].Service),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Test[i3].ServiceRef,
			Selector:     mg.Spec.ForProvider.Test[i3].ServiceSelector,
			To: reference.To{
				List:    &RegionBackendServiceList{},
				Managed: &RegionBackendService{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Test[i3].Service")
		}
		mg.Spec.ForProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Subnetwork.
func (mg *Subnetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkRef,
		Selector:     mg.Spec.ForProvider.NetworkSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetHTTPSProxy.
func (mg *TargetHTTPSProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SSLCertificates),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SSLCertificatesRefs,
		Selector:      mg.Spec.ForProvider.SSLCertificatesSelector,
		To: reference.To{
			List:    &SSLCertificateList{},
			Managed: &SSLCertificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SSLCertificates")
	}
	mg.Spec.ForProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SSLCertificatesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this TargetPool.
func (mg *TargetPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.HealthChecksRefs,
		Selector:      mg.Spec.ForProvider.HealthChecksSelector,
		To: reference.To{
			List:    &HTTPHealthCheckList{},
			Managed: &HTTPHealthCheck{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}
